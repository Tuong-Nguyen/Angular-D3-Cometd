/**
 * Kafka REST proxy
 * Confluent Kafka REST proxy
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional } from '@angular/core';
import { Http, Headers, URLSearchParams } from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType } from '@angular/http';

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class TopicApi {
    protected basePath = 'http://11.11.254.102:8082/';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     *
     * Get metadata about a specific topic.
     * @param topicName Name of the topic to get metadata about
     */
    public getTopicMetadata(topicName: string, extraHttpRequestParams?: any): Observable<models.Topic> {
        return this.getTopicMetadataWithHttpInfo(topicName, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     *
     * Get a list of Kafka topics.
     */
    public getTopics(extraHttpRequestParams?: any): Observable<Array<string>> {
        return this.getTopicsWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     *
     * Produce messages to a topic, optionally specifying keys or partitions for the messages.
     * If no partition is provided, one will be chosen based on the hash of the key.
     * If no key is provided, the partition will be chosen for each message in a round-robin fashion.
     * @param topicName Name of the topic to produce the messages to
     * @param records A list of records to produce to the topic.
     */
    public produceMessageToTopic(topicName: string, records: models.ProduceMessages,
                                 extraHttpRequestParams?: any): Observable<models.OffsetWithAvroSchema> {
        return this.produceMessageToTopicWithHttpInfo(topicName, records, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     *
     * Get metadata about a specific topic.
     * @param topicName Name of the topic to get metadata about
     */
    public getTopicMetadataWithHttpInfo(topicName: string,
                                        extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/topics/${topicName}`;

        const queryParameters = new URLSearchParams();
        const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'topicName' is not null or undefined
        if (topicName === null || topicName === undefined) {
            throw new Error('Required parameter topicName was null or undefined when calling getTopicMetadata.');
        }
        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        // to determine the Accept header
        const produces: string[] = [
            'application/vnd.kafka.v2+json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     *
     * Get a list of Kafka topics.
     */
    public getTopicsWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/topics`;

        const queryParameters = new URLSearchParams();
        const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        // to determine the Accept header
        const produces: string[] = [
            'application/vnd.kafka.v2+json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     *
     * Produce messages to a topic, optionally specifying keys or partitions for the messages.
     * If no partition is provided, one will be chosen based on the hash of the key.
     * If no key is provided, the partition will be chosen for each message in a round-robin fashion.
     * @param topicName Name of the topic to produce the messages to
     * @param records A list of records to produce to the topic.
     */
    public produceMessageToTopicWithHttpInfo(topicName: string, records: models.ProduceMessages,
                                             extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/topics/${topicName}`;

        const queryParameters = new URLSearchParams();
        const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'topicName' is not null or undefined
        if (topicName === null || topicName === undefined) {
            throw new Error('Required parameter topicName was null or undefined when calling produceMessageToTopic.');
        }
        // verify required parameter 'records' is not null or undefined
        if (records === null || records === undefined) {
            throw new Error('Required parameter records was null or undefined when calling produceMessageToTopic.');
        }
        // to determine the Content-Type header
        const consumes: string[] = [
            'application/vnd.kafka.json.v2+json'
        ];

        // to determine the Accept header
        const produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: records == null ? '' : JSON.stringify(records), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
