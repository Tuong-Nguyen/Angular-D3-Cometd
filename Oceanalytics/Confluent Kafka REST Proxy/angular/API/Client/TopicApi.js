/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.TopicApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Confluent Kafka REST proxy
 * Version: 1.0.0
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license Apache 2.0
 * http://www.apache.org/licenses/LICENSE-2.0.html
 */

goog.provide('API.Client.TopicApi');

goog.require('API.Client.OffsetWithAvroSchema');
goog.require('API.Client.ProduceMessages');
goog.require('API.Client.Topic');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.TopicApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('TopicApiBasePath') ?
                   /** @type {!string} */ ($injector.get('TopicApiBasePath')) :
                   'http://11.11.254.102:8082/';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('TopicApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('TopicApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.TopicApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * 
 * Get metadata about a specific topic.
 * @param {!string} topicName Name of the topic to get metadata about
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Topic>}
 */
API.Client.TopicApi.prototype.getTopicMetadata = function(topicName, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/topics/{topic_name}'
      .replace('{' + 'topic_name' + '}', String(topicName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'topicName' is set
  if (!topicName) {
    throw new Error('Missing required parameter topicName when calling getTopicMetadata');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get a list of Kafka topics.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!string>>}
 */
API.Client.TopicApi.prototype.getTopics = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/topics';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Produce messages to a topic, optionally specifying keys or partitions for the messages. If no partition is provided, one will be chosen based on the hash of the key. If no key is provided, the partition will be chosen for each message in a round-robin fashion.
 * @param {!string} topicName Name of the topic to produce the messages to
 * @param {!ProduceMessages} records A list of records to produce to the topic.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.OffsetWithAvroSchema>}
 */
API.Client.TopicApi.prototype.produceMessageToTopic = function(topicName, records, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/topics/{topic_name}'
      .replace('{' + 'topic_name' + '}', String(topicName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'topicName' is set
  if (!topicName) {
    throw new Error('Missing required parameter topicName when calling produceMessageToTopic');
  }
  // verify required parameter 'records' is set
  if (!records) {
    throw new Error('Missing required parameter records when calling produceMessageToTopic');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: records,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
