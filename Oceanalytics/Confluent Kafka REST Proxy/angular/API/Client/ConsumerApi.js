/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.ConsumerApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Confluent Kafka REST proxy
 * Version: 1.0.0
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license Apache 2.0
 * http://www.apache.org/licenses/LICENSE-2.0.html
 */

goog.provide('API.Client.ConsumerApi');

goog.require('API.Client.ConsumerRequest');
goog.require('API.Client.ConsumerResponse');
goog.require('API.Client.OffsetForPartition');
goog.require('API.Client.OffsetForPartitionWithMetadata');
goog.require('API.Client.PartitionInTopic');
goog.require('API.Client.RecordInfo');
goog.require('API.Client.TopicSubscriptionRequest');
goog.require('API.Client.Topics');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.ConsumerApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('ConsumerApiBasePath') ?
                   /** @type {!string} */ ($injector.get('ConsumerApiBasePath')) :
                   'http://11.11.254.102:8082/';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('ConsumerApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('ConsumerApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.ConsumerApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * 
 * Manually assign a list of partitions to this consumer.
 * @param {!string} groupName The name of the consumer group
 * @param {!string} instance The ID of the consumer instance
 * @param {!Array<!API.Client.PartitionInTopic>=} opt_partitions A list of partitions to assign to this consumer
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.ConsumerApi.prototype.assignPartitions = function(groupName, instance, opt_partitions, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/consumers/{group_name}/instances/{instance}/assignments'
      .replace('{' + 'group_name' + '}', String(groupName))
      .replace('{' + 'instance' + '}', String(instance));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'groupName' is set
  if (!groupName) {
    throw new Error('Missing required parameter groupName when calling assignPartitions');
  }
  // verify required parameter 'instance' is set
  if (!instance) {
    throw new Error('Missing required parameter instance when calling assignPartitions');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: opt_partitions,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Commit a list of offsets for the consumer. When the post body is empty, it commits all the records that have been fetched by the consumer instance
 * @param {!string} groupName The name of the consumer group
 * @param {!string} instance The ID of the consumer instance
 * @param {!Array<!API.Client.OffsetForPartition>=} opt_offsets A list of offsets to commit for partitions
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.ConsumerApi.prototype.commitOffsets = function(groupName, instance, opt_offsets, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/consumers/{group_name}/instances/{instance}/offsets'
      .replace('{' + 'group_name' + '}', String(groupName))
      .replace('{' + 'instance' + '}', String(instance));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'groupName' is set
  if (!groupName) {
    throw new Error('Missing required parameter groupName when calling commitOffsets');
  }
  // verify required parameter 'instance' is set
  if (!instance) {
    throw new Error('Missing required parameter instance when calling commitOffsets');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: opt_offsets,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Create a new consumer instance in the consumer group
 * @param {!string} groupName The name of the consumer group.
 * @param {!ConsumerRequest=} opt_consumerRequest 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ConsumerResponse>}
 */
API.Client.ConsumerApi.prototype.createInstanceToGroup = function(groupName, opt_consumerRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/consumers/{group_name}'
      .replace('{' + 'group_name' + '}', String(groupName));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'groupName' is set
  if (!groupName) {
    throw new Error('Missing required parameter groupName when calling createInstanceToGroup');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: opt_consumerRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Destroy the consumer instance.
 * @param {!string} groupName The name of the consumer group
 * @param {!string} instance The ID of the consumer instance
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.ConsumerApi.prototype.destroyConsumer = function(groupName, instance, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/consumers/{group_name}/instances/{instance}'
      .replace('{' + 'group_name' + '}', String(groupName))
      .replace('{' + 'instance' + '}', String(instance));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'groupName' is set
  if (!groupName) {
    throw new Error('Missing required parameter groupName when calling destroyConsumer');
  }
  // verify required parameter 'instance' is set
  if (!instance) {
    throw new Error('Missing required parameter instance when calling destroyConsumer');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Fetch data for the topics or partitions specified using one of the subscribe/assign APIs.
 * @param {!string} groupName The name of the consumer group
 * @param {!string} instance The ID of the consumer instance
 * @param {!number=} opt_timeout The number of milliseconds for the underlying client library poll(timeout) request to fetch the records. Default to 5000ms.
 * @param {!number=} opt_maxBytes The maximum number of bytes of unencoded keys and values that should be included in the response. This provides approximate control over the size of responses and the amount of memory required to store the decoded response. The actual limit will be the minimum of this setting and the server-side configuration consumer.request.max.bytes. Default is unlimited.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.RecordInfo>>}
 */
API.Client.ConsumerApi.prototype.fetchData = function(groupName, instance, opt_timeout, opt_maxBytes, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/consumers/{group_name}/instances/{instance}/records'
      .replace('{' + 'group_name' + '}', String(groupName))
      .replace('{' + 'instance' + '}', String(instance));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'groupName' is set
  if (!groupName) {
    throw new Error('Missing required parameter groupName when calling fetchData');
  }
  // verify required parameter 'instance' is set
  if (!instance) {
    throw new Error('Missing required parameter instance when calling fetchData');
  }
  if (opt_timeout !== undefined) {
    queryParameters['timeout'] = opt_timeout;
  }

  if (opt_maxBytes !== undefined) {
    queryParameters['max_bytes'] = opt_maxBytes;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get the last committed offsets for the given partitions (whether the commit happened by this process or another).
 * @param {!string} groupName The name of the consumer group
 * @param {!string} instance The ID of the consumer instance
 * @param {!Array<!API.Client.PartitionInTopic>=} opt_partitions A list of partitions to find the last committed offsets for
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.OffsetForPartitionWithMetadata>>}
 */
API.Client.ConsumerApi.prototype.getLastCommittedOffsetsForPartition = function(groupName, instance, opt_partitions, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/consumers/{group_name}/instances/{instance}/offsets'
      .replace('{' + 'group_name' + '}', String(groupName))
      .replace('{' + 'instance' + '}', String(instance));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'groupName' is set
  if (!groupName) {
    throw new Error('Missing required parameter groupName when calling getLastCommittedOffsetsForPartition');
  }
  // verify required parameter 'instance' is set
  if (!instance) {
    throw new Error('Missing required parameter instance when calling getLastCommittedOffsetsForPartition');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
    data: opt_partitions,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get the list of partitions currently manually assigned to this consumer.
 * @param {!string} groupName The name of the consumer group
 * @param {!string} instance The ID of the consumer instance
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.PartitionInTopic>>}
 */
API.Client.ConsumerApi.prototype.getPartitions = function(groupName, instance, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/consumers/{group_name}/instances/{instance}/assignments'
      .replace('{' + 'group_name' + '}', String(groupName))
      .replace('{' + 'instance' + '}', String(instance));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'groupName' is set
  if (!groupName) {
    throw new Error('Missing required parameter groupName when calling getPartitions');
  }
  // verify required parameter 'instance' is set
  if (!instance) {
    throw new Error('Missing required parameter instance when calling getPartitions');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get the current subscribed list of topics.
 * @param {!string} groupName The name of the consumer group
 * @param {!string} instance The ID of the consumer instance
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Topics>}
 */
API.Client.ConsumerApi.prototype.getTopicsSubscriptions = function(groupName, instance, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/consumers/{group_name}/instances/{instance}/subscription'
      .replace('{' + 'group_name' + '}', String(groupName))
      .replace('{' + 'instance' + '}', String(instance));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'groupName' is set
  if (!groupName) {
    throw new Error('Missing required parameter groupName when calling getTopicsSubscriptions');
  }
  // verify required parameter 'instance' is set
  if (!instance) {
    throw new Error('Missing required parameter instance when calling getTopicsSubscriptions');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Seek to the first offset for each of the given partitions.
 * @param {!string} groupName The name of the consumer group
 * @param {!string} instance The ID of the consumer instance
 * @param {!Array<!API.Client.PartitionInTopic>=} opt_partitions A list of partitions
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.ConsumerApi.prototype.seekToFirstOffsetOfPartitions = function(groupName, instance, opt_partitions, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/consumers/{group_name}/instances/{instance}/positions/beginning'
      .replace('{' + 'group_name' + '}', String(groupName))
      .replace('{' + 'instance' + '}', String(instance));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'groupName' is set
  if (!groupName) {
    throw new Error('Missing required parameter groupName when calling seekToFirstOffsetOfPartitions');
  }
  // verify required parameter 'instance' is set
  if (!instance) {
    throw new Error('Missing required parameter instance when calling seekToFirstOffsetOfPartitions');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: opt_partitions,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Seek to the last offset for each of the given partitions.
 * @param {!string} groupName The name of the consumer group
 * @param {!string} instance The ID of the consumer instance
 * @param {!Array<!API.Client.PartitionInTopic>=} opt_partitions A list of partitions
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.ConsumerApi.prototype.seekToLastOffsetOfPartitions = function(groupName, instance, opt_partitions, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/consumers/{group_name}/instances/{instance}/positions/end'
      .replace('{' + 'group_name' + '}', String(groupName))
      .replace('{' + 'instance' + '}', String(instance));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'groupName' is set
  if (!groupName) {
    throw new Error('Missing required parameter groupName when calling seekToLastOffsetOfPartitions');
  }
  // verify required parameter 'instance' is set
  if (!instance) {
    throw new Error('Missing required parameter instance when calling seekToLastOffsetOfPartitions');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: opt_partitions,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Overrides the fetch offsets that the consumer will use for the next set of records to fetch.
 * @param {!string} groupName The name of the consumer group
 * @param {!string} instance The ID of the consumer instance
 * @param {!Array<!API.Client.OffsetForPartition>=} opt_offsets A list of offsets
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.ConsumerApi.prototype.setFetchOffsets = function(groupName, instance, opt_offsets, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/consumers/{group_name}/instances/{instance}/positions'
      .replace('{' + 'group_name' + '}', String(groupName))
      .replace('{' + 'instance' + '}', String(instance));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'groupName' is set
  if (!groupName) {
    throw new Error('Missing required parameter groupName when calling setFetchOffsets');
  }
  // verify required parameter 'instance' is set
  if (!instance) {
    throw new Error('Missing required parameter instance when calling setFetchOffsets');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: opt_offsets,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Subscribe to the given list of topics or a topic pattern to get dynamically assigned partitions. If a prior subscription exists, it would be replaced by the latest subscription.
 * @param {!string} groupName The name of the consumer group
 * @param {!string} instance The ID of the consumer instance
 * @param {!TopicSubscriptionRequest=} opt_topics 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.ConsumerApi.prototype.subscribesTopics = function(groupName, instance, opt_topics, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/consumers/{group_name}/instances/{instance}/subscription'
      .replace('{' + 'group_name' + '}', String(groupName))
      .replace('{' + 'instance' + '}', String(instance));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'groupName' is set
  if (!groupName) {
    throw new Error('Missing required parameter groupName when calling subscribesTopics');
  }
  // verify required parameter 'instance' is set
  if (!instance) {
    throw new Error('Missing required parameter instance when calling subscribesTopics');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: opt_topics,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Unsubscribe from topics currently subscribed.
 * @param {!string} groupName The name of the consumer group
 * @param {!string} instance The ID of the consumer instance
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.ConsumerApi.prototype.unsubscribe = function(groupName, instance, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/consumers/{group_name}/instances/{instance}/subscription'
      .replace('{' + 'group_name' + '}', String(groupName))
      .replace('{' + 'instance' + '}', String(instance));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'groupName' is set
  if (!groupName) {
    throw new Error('Missing required parameter groupName when calling unsubscribe');
  }
  // verify required parameter 'instance' is set
  if (!instance) {
    throw new Error('Missing required parameter instance when calling unsubscribe');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
