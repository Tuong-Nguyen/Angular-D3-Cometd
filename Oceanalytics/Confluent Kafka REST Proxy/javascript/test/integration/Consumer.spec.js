/**
 * Created by nctuong on 4/26/2017.
 */
/**
 * Kafka REST proxy
 * Confluent Kafka REST proxy
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD.
        define(['expect.js', '../../src/index'], factory);
    } else if (typeof module === 'object' && module.exports) {
        // CommonJS-like environments that support module.exports, like Node.
        factory(require('expect.js'), require('../../src/index'));
    } else {
        // Browser globals (root is window)
        factory(root.expect, root.KafkaRestProxy);
    }
}(this, function (expect, KafkaRestProxy) {
    'use strict';

    var instance;

    beforeEach(function () {
        instance = new KafkaRestProxy.ConsumerApi();
    });

    var getProperty = function (object, getter, property) {
        // Use getter method if present; otherwise, get the property directly.
        if (typeof object[getter] === 'function')
            return object[getter]();
        else
            return object[property];
    };

    var setProperty = function (object, setter, property, value) {
        // Use setter method if present; otherwise, set the property directly.
        if (typeof object[setter] === 'function')
            object[setter](value);
        else
            object[property] = value;
    };

    describe('Consumer', function () {
        /**
         * Send a message to topic
         * @param topicName
         * @param message
         * @param doneCallBack
         */
        function sendMessage(topicName, message, doneCallBack) {
            var produceMessages = new KafkaRestProxy.ProduceMessages();
            var createTopicMessage = new KafkaRestProxy.Record();
            createTopicMessage.value = message;
            produceMessages.records = [createTopicMessage];
            var topicApi = new KafkaRestProxy.TopicApi();

            topicApi.produceMessageToTopic(topicName, produceMessages, function (error, data) {
                if (error) {
                    doneCallBack(error);
                }
            });
            setTimeout(doneCallBack, 500); // wait for some time for consumer to get message.
        }

        /**
         * Create an consumer instance and subscribe it to a topic
         * @param consumerName
         * @param groupName
         * @param done
         * @param topicName
         */
        function createConsumerAndSubscribeTopic(consumerName, groupName, topicName, done) {
            var consumerApi = new KafkaRestProxy.ConsumerApi();

            var consumerRequest = new KafkaRestProxy.ConsumerRequest();
            consumerRequest.name = consumerName;
            consumerRequest.format = "json";
            consumerRequest["auto.offset.reset"] = "latest";
            consumerRequest["auto.commit.enable"] = "true";

            consumerApi.createInstanceToGroup(groupName, {consumerRequest: consumerRequest}, function (error, data) {
                if (error) {
                    if (error.response.res.statusCode !== 409) { // instance exists.
                        done(error);
                        return;
                    }
                }
                // subscribe for the topic
                var topicRequest = new KafkaRestProxy.TopicSubscriptionRequest();
                topicRequest.topics = [topicName];

                consumerApi.subscribesTopics(groupName, consumerName, {topics: topicRequest}, function (error, data) {
                    if (error) {
                        done(error);
                        return;
                    }

                    done();
                });
            });
        }

        describe('read', function () {
            const topicName = "testing_topic";
            const groupName = "test_group";
            const consumerName = "Consumer_Test";

            before(function (done) {
                // create a topic "testing_topic"
                sendMessage(topicName, "Create Topic", function (error) {
                    if (error) {
                        done(error);
                        return;
                    }
                    createConsumerAndSubscribeTopic(consumerName, groupName, topicName, done);
                });
            });

            it('should read message from a message', function (done) {
                // act
                const messageTest = "Message_Test" + Date.now();
                sendMessage(topicName, messageTest, function (error) {
                    if (error) {
                        done(error);
                        return;
                    }

                    var consumerApi = new KafkaRestProxy.ConsumerApi();
                    consumerApi.fetchData(groupName, consumerName, null, function (error, data) {
                        if (error) {
                            done(error);
                            return;
                        }
                        // assert
                        expect(data.length).to.greaterThan(0);
                        var found = false;
                        for (var i = 0; i < data.length; i++) {
                            var message = data[i];
                            if (message.value === messageTest) {
                                found = true;
                                break;
                            }
                        }
                        expect(found).to.be(true);

                        done();
                    });
                });
            });

            it("twice should return new messages in the 2nd read", function (done) {
                var message1 = "TestMessage " + Date.now();
                sendMessage(topicName, message1, function (error) {
                    if (error) {
                        done(error);
                        return;
                    }

                    var consumerApi = new KafkaRestProxy.ConsumerApi();
                    consumerApi.fetchData(groupName, consumerName, null, function (error, data) {
                        if (error) {
                            done(error);
                            return;
                        }
                        // assert
                        expect(data.length).to.greaterThan(0);
                        var found = false;
                        for (var i = 0; i < data.length; i++) {
                            var message = data[i];
                            if (message.value === message1) {
                                found = true;
                                break;
                            }
                        }
                        expect(found).to.be(true);

                        var message2 = "Message 2 " + Date.now();
                        sendMessage(topicName, message2, function (error) {
                            if (error) {
                                done(error);
                                return;
                            }

                            consumerApi.fetchData(groupName, consumerName, null, function (error, data) {
                                if (error) {
                                    done(error);
                                    return;
                                }
                                // assert
                                expect(data.length).to.be(1);
                                expect(data[0].value).to.be(message2);
                                done();
                            });
                        });
                    });

                    it("return empty when no new messages in topic", function (done) {
                        var consumerApi = new KafkaRestProxy.ConsumerApi();
                        consumerApi.fetchData(groupName, consumerName, null, function (error, data) {
                            if (error) {
                                done(error);
                                return;
                            }
                            // assert
                            expect(data.length).to.be(0);

                            done();
                        });
                        done();
                    });
                });


            });
        });

        describe('instance', function () {
            const groupName = "Group_Name";
            const consumerName = "Instance_Name";
            beforeEach(function(done){
                createConsumerAndSubscribeTopic(consumerName, groupName, "Simple_Topic", done);
            });

            // Increasing the timeout to 20 seconds but do not see the consumer deleted.
            it('should automatically removed after X seconds', function (done) {
                setTimeout(function(){
                    var consumerApi = new KafkaRestProxy.ConsumerApi();
                    consumerApi.fetchData(groupName, consumerName, null, function (error, data) {
                        expect(error).to.not.be(null);
                        expect(error.response.res.statusCode).to.be(404);
                        done();
                    });
                }, 20000);
            });
        });
    });
}));
