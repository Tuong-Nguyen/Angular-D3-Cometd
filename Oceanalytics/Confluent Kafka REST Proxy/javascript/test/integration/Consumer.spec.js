/**
 * Created by nctuong on 4/26/2017.
 */
/**
 * Kafka REST proxy
 * Confluent Kafka REST proxy
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD.
        define(['expect.js', '../../src/index'], factory);
    } else if (typeof module === 'object' && module.exports) {
        // CommonJS-like environments that support module.exports, like Node.
        factory(require('expect.js'), require('../../src/index'));
    } else {
        // Browser globals (root is window)
        factory(root.expect, root.KafkaRestProxy);
    }
}(this, function(expect, KafkaRestProxy) {
    'use strict';

    var instance;

    beforeEach(function() {
        instance = new KafkaRestProxy.ConsumerApi();
    });

    var getProperty = function(object, getter, property) {
        // Use getter method if present; otherwise, get the property directly.
        if (typeof object[getter] === 'function')
            return object[getter]();
        else
            return object[property];
    }

    var setProperty = function(object, setter, property, value) {
        // Use setter method if present; otherwise, set the property directly.
        if (typeof object[setter] === 'function')
            object[setter](value);
        else
            object[property] = value;
    }

    describe('Consumer', function() {
        describe('read', function() {
            it('should read message from a message', function(done) {
                //TODO: implementation
                done();
            });

            it("twice should return new messages in the 2nd read", function(done) {
                //TODO: implementation
               done();
            });

            it("wait for 5 seconds and return empty when no new messages in topic", function (done) {
                //TODO: implementation
                done();
            });
        });
        describe('instance', function() {
            it('should automatically removed after X seconds', function(done) {
                //TODO: implementation
                done();
            });
        });
    });
}));
