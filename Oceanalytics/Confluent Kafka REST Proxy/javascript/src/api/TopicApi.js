/**
 * Kafka REST proxy
 * Confluent Kafka REST proxy
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/OffsetWithAvroSchema', 'model/Record', 'model/Topic'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/OffsetWithAvroSchema'), require('../model/Record'), require('../model/Topic'));
  } else {
    // Browser globals (root is window)
    if (!root.KafkaRestProxy) {
      root.KafkaRestProxy = {};
    }
    root.KafkaRestProxy.TopicApi = factory(root.KafkaRestProxy.ApiClient, root.KafkaRestProxy.OffsetWithAvroSchema, root.KafkaRestProxy.Record, root.KafkaRestProxy.Topic);
  }
}(this, function(ApiClient, OffsetWithAvroSchema, Record, Topic) {
  'use strict';

  /**
   * Topic service.
   * @module api/TopicApi
   * @version 1.0.0
   */

  /**
   * Constructs a new TopicApi. 
   * @alias module:api/TopicApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getTopicMetadata operation.
     * @callback module:api/TopicApi~getTopicMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Topic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metadata about a specific topic.
     * @param {String} topicName Name of the topic to get metadata about
     * @param {module:api/TopicApi~getTopicMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Topic}
     */
    this.getTopicMetadata = function(topicName, callback) {
      var postBody = null;

      // verify the required parameter 'topicName' is set
      if (topicName == undefined || topicName == null) {
        throw new Error("Missing the required parameter 'topicName' when calling getTopicMetadata");
      }


      var pathParams = {
        'topic_name': topicName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Topic;

      return this.apiClient.callApi(
        '/topics/{topic_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTopics operation.
     * @callback module:api/TopicApi~getTopicsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of Kafka topics.
     * @param {module:api/TopicApi~getTopicsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getTopics = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/topics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the produceMessageToTopic operation.
     * @callback module:api/TopicApi~produceMessageToTopicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OffsetWithAvroSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Produce messages to a topic, optionally specifying keys or partitions for the messages. If no partition is provided, one will be chosen based on the hash of the key. If no key is provided, the partition will be chosen for each message in a round-robin fashion.
     * @param {String} topicName Name of the topic to produce the messages to
     * @param {Array.<module:model/Record>} records A list of records to produce to the topic.
     * @param {module:api/TopicApi~produceMessageToTopicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OffsetWithAvroSchema}
     */
    this.produceMessageToTopic = function(topicName, records, callback) {
      var postBody = records;

      // verify the required parameter 'topicName' is set
      if (topicName == undefined || topicName == null) {
        throw new Error("Missing the required parameter 'topicName' when calling produceMessageToTopic");
      }

      // verify the required parameter 'records' is set
      if (records == undefined || records == null) {
        throw new Error("Missing the required parameter 'records' when calling produceMessageToTopic");
      }


      var pathParams = {
        'topic_name': topicName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OffsetWithAvroSchema;

      return this.apiClient.callApi(
        '/topics/{topic_name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
