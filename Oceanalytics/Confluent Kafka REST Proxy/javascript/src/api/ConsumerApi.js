/**
 * Kafka REST proxy
 * Confluent Kafka REST proxy
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ConsumerRequest', 'model/ConsumerResponse', 'model/OffsetForPartition', 'model/OffsetForPartitionWithMetadata', 'model/PartitionInTopic', 'model/RecordInfo', 'model/TopicSubscriptionRequest', 'model/Topics'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ConsumerRequest'), require('../model/ConsumerResponse'), require('../model/OffsetForPartition'), require('../model/OffsetForPartitionWithMetadata'), require('../model/PartitionInTopic'), require('../model/RecordInfo'), require('../model/TopicSubscriptionRequest'), require('../model/Topics'));
  } else {
    // Browser globals (root is window)
    if (!root.KafkaRestProxy) {
      root.KafkaRestProxy = {};
    }
    root.KafkaRestProxy.ConsumerApi = factory(root.KafkaRestProxy.ApiClient, root.KafkaRestProxy.ConsumerRequest, root.KafkaRestProxy.ConsumerResponse, root.KafkaRestProxy.OffsetForPartition, root.KafkaRestProxy.OffsetForPartitionWithMetadata, root.KafkaRestProxy.PartitionInTopic, root.KafkaRestProxy.RecordInfo, root.KafkaRestProxy.TopicSubscriptionRequest, root.KafkaRestProxy.Topics);
  }
}(this, function(ApiClient, ConsumerRequest, ConsumerResponse, OffsetForPartition, OffsetForPartitionWithMetadata, PartitionInTopic, RecordInfo, TopicSubscriptionRequest, Topics) {
  'use strict';

  /**
   * Consumer service.
   * @module api/ConsumerApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ConsumerApi. 
   * @alias module:api/ConsumerApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the assignPartitions operation.
     * @callback module:api/ConsumerApi~assignPartitionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Manually assign a list of partitions to this consumer.
     * @param {String} groupName The name of the consumer group
     * @param {String} instance The ID of the consumer instance
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PartitionInTopic>} opts.partitions A list of partitions to assign to this consumer
     * @param {module:api/ConsumerApi~assignPartitionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.assignPartitions = function(groupName, instance, opts, callback) {
      opts = opts || {};
      var postBody = opts['partitions'];

      // verify the required parameter 'groupName' is set
      if (groupName == undefined || groupName == null) {
        throw new Error("Missing the required parameter 'groupName' when calling assignPartitions");
      }

      // verify the required parameter 'instance' is set
      if (instance == undefined || instance == null) {
        throw new Error("Missing the required parameter 'instance' when calling assignPartitions");
      }


      var pathParams = {
        'group_name': groupName,
        'instance': instance
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/vnd.kafka.v2+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/consumers/{group_name}/instances/{instance}/assignments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the commitOffsets operation.
     * @callback module:api/ConsumerApi~commitOffsetsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Commit a list of offsets for the consumer. When the post body is empty, it commits all the records that have been fetched by the consumer instance
     * @param {String} groupName The name of the consumer group
     * @param {String} instance The ID of the consumer instance
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/OffsetForPartition>} opts.offsets A list of offsets to commit for partitions
     * @param {module:api/ConsumerApi~commitOffsetsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.commitOffsets = function(groupName, instance, opts, callback) {
      opts = opts || {};
      var postBody = opts['offsets'];

      // verify the required parameter 'groupName' is set
      if (groupName == undefined || groupName == null) {
        throw new Error("Missing the required parameter 'groupName' when calling commitOffsets");
      }

      // verify the required parameter 'instance' is set
      if (instance == undefined || instance == null) {
        throw new Error("Missing the required parameter 'instance' when calling commitOffsets");
      }


      var pathParams = {
        'group_name': groupName,
        'instance': instance
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/vnd.kafka.v2+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/consumers/{group_name}/instances/{instance}/offsets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createInstanceToGroup operation.
     * @callback module:api/ConsumerApi~createInstanceToGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsumerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new consumer instance in the consumer group
     * @param {String} groupName The name of the consumer group.
     * @param {Object} opts Optional parameters
     * @param {module:model/ConsumerRequest} opts.consumerRequest 
     * @param {module:api/ConsumerApi~createInstanceToGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsumerResponse}
     */
    this.createInstanceToGroup = function(groupName, opts, callback) {
      opts = opts || {};
      var postBody = opts['consumerRequest'];

      // verify the required parameter 'groupName' is set
      if (groupName == undefined || groupName == null) {
        throw new Error("Missing the required parameter 'groupName' when calling createInstanceToGroup");
      }


      var pathParams = {
        'group_name': groupName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/vnd.kafka.v2+json'];
      var accepts = ['application/vnd.kafka.v2+json'];
      var returnType = ConsumerResponse;

      return this.apiClient.callApi(
        '/consumers/{group_name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the destroyConsumer operation.
     * @callback module:api/ConsumerApi~destroyConsumerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Destroy the consumer instance.
     * @param {String} groupName The name of the consumer group
     * @param {String} instance The ID of the consumer instance
     * @param {module:api/ConsumerApi~destroyConsumerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.destroyConsumer = function(groupName, instance, callback) {
      var postBody = null;

      // verify the required parameter 'groupName' is set
      if (groupName == undefined || groupName == null) {
        throw new Error("Missing the required parameter 'groupName' when calling destroyConsumer");
      }

      // verify the required parameter 'instance' is set
      if (instance == undefined || instance == null) {
        throw new Error("Missing the required parameter 'instance' when calling destroyConsumer");
      }


      var pathParams = {
        'group_name': groupName,
        'instance': instance
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/consumers/{group_name}/instances/{instance}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchData operation.
     * @callback module:api/ConsumerApi~fetchDataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RecordInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch data for the topics or partitions specified using one of the subscribe/assign APIs.
     * @param {String} groupName The name of the consumer group
     * @param {String} instance The ID of the consumer instance
     * @param {Object} opts Optional parameters
     * @param {Number} opts.timeout The number of milliseconds for the underlying client library poll(timeout) request to fetch the records. Default to 5000ms.
     * @param {Number} opts.maxBytes The maximum number of bytes of unencoded keys and values that should be included in the response. This provides approximate control over the size of responses and the amount of memory required to store the decoded response. The actual limit will be the minimum of this setting and the server-side configuration consumer.request.max.bytes. Default is unlimited.
     * @param {module:api/ConsumerApi~fetchDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RecordInfo>}
     */
    this.fetchData = function(groupName, instance, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'groupName' is set
      if (groupName == undefined || groupName == null) {
        throw new Error("Missing the required parameter 'groupName' when calling fetchData");
      }

      // verify the required parameter 'instance' is set
      if (instance == undefined || instance == null) {
        throw new Error("Missing the required parameter 'instance' when calling fetchData");
      }


      var pathParams = {
        'group_name': groupName,
        'instance': instance
      };
      var queryParams = {
        'timeout': opts['timeout'],
        'max_bytes': opts['maxBytes']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/vnd.kafka.json.v2+json'];
      var accepts = ['application/vnd.kafka.json.v2+json'];
      var returnType = [RecordInfo];

      return this.apiClient.callApi(
        '/consumers/{group_name}/instances/{instance}/records', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLastCommittedOffsetsForPartition operation.
     * @callback module:api/ConsumerApi~getLastCommittedOffsetsForPartitionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OffsetForPartitionWithMetadata>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the last committed offsets for the given partitions (whether the commit happened by this process or another).
     * @param {String} groupName The name of the consumer group
     * @param {String} instance The ID of the consumer instance
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PartitionInTopic>} opts.partitions A list of partitions to find the last committed offsets for
     * @param {module:api/ConsumerApi~getLastCommittedOffsetsForPartitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OffsetForPartitionWithMetadata>}
     */
    this.getLastCommittedOffsetsForPartition = function(groupName, instance, opts, callback) {
      opts = opts || {};
      var postBody = opts['partitions'];

      // verify the required parameter 'groupName' is set
      if (groupName == undefined || groupName == null) {
        throw new Error("Missing the required parameter 'groupName' when calling getLastCommittedOffsetsForPartition");
      }

      // verify the required parameter 'instance' is set
      if (instance == undefined || instance == null) {
        throw new Error("Missing the required parameter 'instance' when calling getLastCommittedOffsetsForPartition");
      }


      var pathParams = {
        'group_name': groupName,
        'instance': instance
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/vnd.kafka.v2+json'];
      var accepts = ['application/vnd.kafka.v2+json'];
      var returnType = [OffsetForPartitionWithMetadata];

      return this.apiClient.callApi(
        '/consumers/{group_name}/instances/{instance}/offsets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPartitions operation.
     * @callback module:api/ConsumerApi~getPartitionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PartitionInTopic>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of partitions currently manually assigned to this consumer.
     * @param {String} groupName The name of the consumer group
     * @param {String} instance The ID of the consumer instance
     * @param {module:api/ConsumerApi~getPartitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PartitionInTopic>}
     */
    this.getPartitions = function(groupName, instance, callback) {
      var postBody = null;

      // verify the required parameter 'groupName' is set
      if (groupName == undefined || groupName == null) {
        throw new Error("Missing the required parameter 'groupName' when calling getPartitions");
      }

      // verify the required parameter 'instance' is set
      if (instance == undefined || instance == null) {
        throw new Error("Missing the required parameter 'instance' when calling getPartitions");
      }


      var pathParams = {
        'group_name': groupName,
        'instance': instance
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/vnd.kafka.v2+json'];
      var accepts = [];
      var returnType = [PartitionInTopic];

      return this.apiClient.callApi(
        '/consumers/{group_name}/instances/{instance}/assignments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTopicsSubscriptions operation.
     * @callback module:api/ConsumerApi~getTopicsSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Topics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the current subscribed list of topics.
     * @param {String} groupName The name of the consumer group
     * @param {String} instance The ID of the consumer instance
     * @param {module:api/ConsumerApi~getTopicsSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Topics}
     */
    this.getTopicsSubscriptions = function(groupName, instance, callback) {
      var postBody = null;

      // verify the required parameter 'groupName' is set
      if (groupName == undefined || groupName == null) {
        throw new Error("Missing the required parameter 'groupName' when calling getTopicsSubscriptions");
      }

      // verify the required parameter 'instance' is set
      if (instance == undefined || instance == null) {
        throw new Error("Missing the required parameter 'instance' when calling getTopicsSubscriptions");
      }


      var pathParams = {
        'group_name': groupName,
        'instance': instance
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/vnd.kafka.json.v2+json'];
      var accepts = [];
      var returnType = Topics;

      return this.apiClient.callApi(
        '/consumers/{group_name}/instances/{instance}/subscription', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the seekToFirstOffsetOfPartitions operation.
     * @callback module:api/ConsumerApi~seekToFirstOffsetOfPartitionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Seek to the first offset for each of the given partitions.
     * @param {String} groupName The name of the consumer group
     * @param {String} instance The ID of the consumer instance
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PartitionInTopic>} opts.partitions A list of partitions
     * @param {module:api/ConsumerApi~seekToFirstOffsetOfPartitionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.seekToFirstOffsetOfPartitions = function(groupName, instance, opts, callback) {
      opts = opts || {};
      var postBody = opts['partitions'];

      // verify the required parameter 'groupName' is set
      if (groupName == undefined || groupName == null) {
        throw new Error("Missing the required parameter 'groupName' when calling seekToFirstOffsetOfPartitions");
      }

      // verify the required parameter 'instance' is set
      if (instance == undefined || instance == null) {
        throw new Error("Missing the required parameter 'instance' when calling seekToFirstOffsetOfPartitions");
      }


      var pathParams = {
        'group_name': groupName,
        'instance': instance
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/vnd.kafka.v2+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/consumers/{group_name}/instances/{instance}/positions/beginning', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the seekToLastOffsetOfPartitions operation.
     * @callback module:api/ConsumerApi~seekToLastOffsetOfPartitionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Seek to the last offset for each of the given partitions.
     * @param {String} groupName The name of the consumer group
     * @param {String} instance The ID of the consumer instance
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PartitionInTopic>} opts.partitions A list of partitions
     * @param {module:api/ConsumerApi~seekToLastOffsetOfPartitionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.seekToLastOffsetOfPartitions = function(groupName, instance, opts, callback) {
      opts = opts || {};
      var postBody = opts['partitions'];

      // verify the required parameter 'groupName' is set
      if (groupName == undefined || groupName == null) {
        throw new Error("Missing the required parameter 'groupName' when calling seekToLastOffsetOfPartitions");
      }

      // verify the required parameter 'instance' is set
      if (instance == undefined || instance == null) {
        throw new Error("Missing the required parameter 'instance' when calling seekToLastOffsetOfPartitions");
      }


      var pathParams = {
        'group_name': groupName,
        'instance': instance
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/vnd.kafka.v2+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/consumers/{group_name}/instances/{instance}/positions/end', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setFetchOffsets operation.
     * @callback module:api/ConsumerApi~setFetchOffsetsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Overrides the fetch offsets that the consumer will use for the next set of records to fetch.
     * @param {String} groupName The name of the consumer group
     * @param {String} instance The ID of the consumer instance
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/OffsetForPartition>} opts.offsets A list of offsets
     * @param {module:api/ConsumerApi~setFetchOffsetsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setFetchOffsets = function(groupName, instance, opts, callback) {
      opts = opts || {};
      var postBody = opts['offsets'];

      // verify the required parameter 'groupName' is set
      if (groupName == undefined || groupName == null) {
        throw new Error("Missing the required parameter 'groupName' when calling setFetchOffsets");
      }

      // verify the required parameter 'instance' is set
      if (instance == undefined || instance == null) {
        throw new Error("Missing the required parameter 'instance' when calling setFetchOffsets");
      }


      var pathParams = {
        'group_name': groupName,
        'instance': instance
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/vnd.kafka.v2+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/consumers/{group_name}/instances/{instance}/positions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribesTopics operation.
     * @callback module:api/ConsumerApi~subscribesTopicsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe to the given list of topics or a topic pattern to get dynamically assigned partitions. If a prior subscription exists, it would be replaced by the latest subscription.
     * @param {String} groupName The name of the consumer group
     * @param {String} instance The ID of the consumer instance
     * @param {Object} opts Optional parameters
     * @param {module:model/TopicSubscriptionRequest} opts.topics 
     * @param {module:api/ConsumerApi~subscribesTopicsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.subscribesTopics = function(groupName, instance, opts, callback) {
      opts = opts || {};
      var postBody = opts['topics'];

      // verify the required parameter 'groupName' is set
      if (groupName == undefined || groupName == null) {
        throw new Error("Missing the required parameter 'groupName' when calling subscribesTopics");
      }

      // verify the required parameter 'instance' is set
      if (instance == undefined || instance == null) {
        throw new Error("Missing the required parameter 'instance' when calling subscribesTopics");
      }


      var pathParams = {
        'group_name': groupName,
        'instance': instance
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/vnd.kafka.json.v2+json'];
      var accepts = ['application/vnd.kafka.json.v2+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/consumers/{group_name}/instances/{instance}/subscription', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the unsubscribe operation.
     * @callback module:api/ConsumerApi~unsubscribeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unsubscribe from topics currently subscribed.
     * @param {String} groupName The name of the consumer group
     * @param {String} instance The ID of the consumer instance
     * @param {module:api/ConsumerApi~unsubscribeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.unsubscribe = function(groupName, instance, callback) {
      var postBody = null;

      // verify the required parameter 'groupName' is set
      if (groupName == undefined || groupName == null) {
        throw new Error("Missing the required parameter 'groupName' when calling unsubscribe");
      }

      // verify the required parameter 'instance' is set
      if (instance == undefined || instance == null) {
        throw new Error("Missing the required parameter 'instance' when calling unsubscribe");
      }


      var pathParams = {
        'group_name': groupName,
        'instance': instance
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/consumers/{group_name}/instances/{instance}/subscription', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
