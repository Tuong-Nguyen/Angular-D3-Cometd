/**
 * Kafka REST proxy
 * Confluent Kafka REST proxy
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/OffsetWithAvroSchema', 'model/Partition', 'model/Record'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/OffsetWithAvroSchema'), require('../model/Partition'), require('../model/Record'));
  } else {
    // Browser globals (root is window)
    if (!root.KafkaRestProxy) {
      root.KafkaRestProxy = {};
    }
    root.KafkaRestProxy.PartitionApi = factory(root.KafkaRestProxy.ApiClient, root.KafkaRestProxy.OffsetWithAvroSchema, root.KafkaRestProxy.Partition, root.KafkaRestProxy.Record);
  }
}(this, function(ApiClient, OffsetWithAvroSchema, Partition, Record) {
  'use strict';

  /**
   * Partition service.
   * @module api/PartitionApi
   * @version 1.0.0
   */

  /**
   * Constructs a new PartitionApi. 
   * @alias module:api/PartitionApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getPartitionMetadataInTopic operation.
     * @callback module:api/PartitionApi~getPartitionMetadataInTopicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Partition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metadata about a single partition in the topic.
     * @param {String} topicName Name of the topic
     * @param {Number} partitionId ID of the partition to inspect
     * @param {module:api/PartitionApi~getPartitionMetadataInTopicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Partition}
     */
    this.getPartitionMetadataInTopic = function(topicName, partitionId, callback) {
      var postBody = null;

      // verify the required parameter 'topicName' is set
      if (topicName == undefined || topicName == null) {
        throw new Error("Missing the required parameter 'topicName' when calling getPartitionMetadataInTopic");
      }

      // verify the required parameter 'partitionId' is set
      if (partitionId == undefined || partitionId == null) {
        throw new Error("Missing the required parameter 'partitionId' when calling getPartitionMetadataInTopic");
      }


      var pathParams = {
        'topic_name': topicName,
        'partition_id': partitionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/vnd.kafka.v2+json'];
      var returnType = Partition;

      return this.apiClient.callApi(
        '/topics/{topic_name}/partitions/{partition_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPartitionsForTopic operation.
     * @callback module:api/PartitionApi~getPartitionsForTopicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Partition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of partitions for the topic.
     * @param {String} topicName Name of the topic
     * @param {module:api/PartitionApi~getPartitionsForTopicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Partition}
     */
    this.getPartitionsForTopic = function(topicName, callback) {
      var postBody = null;

      // verify the required parameter 'topicName' is set
      if (topicName == undefined || topicName == null) {
        throw new Error("Missing the required parameter 'topicName' when calling getPartitionsForTopic");
      }


      var pathParams = {
        'topic_name': topicName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/vnd.kafka.v2+json'];
      var returnType = Partition;

      return this.apiClient.callApi(
        '/topics/{topic_name}/partitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the produceMessageToPartitionOfTopic operation.
     * @callback module:api/PartitionApi~produceMessageToPartitionOfTopicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OffsetWithAvroSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Produce messages to one partition of the topic.
     * @param {String} topicName Name of the topic to produce the messages to
     * @param {Number} partitionId Partition to produce the messages to
     * @param {Array.<module:model/Record>} records A list of records to produce to partition.
     * @param {module:api/PartitionApi~produceMessageToPartitionOfTopicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OffsetWithAvroSchema}
     */
    this.produceMessageToPartitionOfTopic = function(topicName, partitionId, records, callback) {
      var postBody = records;

      // verify the required parameter 'topicName' is set
      if (topicName == undefined || topicName == null) {
        throw new Error("Missing the required parameter 'topicName' when calling produceMessageToPartitionOfTopic");
      }

      // verify the required parameter 'partitionId' is set
      if (partitionId == undefined || partitionId == null) {
        throw new Error("Missing the required parameter 'partitionId' when calling produceMessageToPartitionOfTopic");
      }

      // verify the required parameter 'records' is set
      if (records == undefined || records == null) {
        throw new Error("Missing the required parameter 'records' when calling produceMessageToPartitionOfTopic");
      }


      var pathParams = {
        'topic_name': topicName,
        'partition_id': partitionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/vnd.kafka.v2+json'];
      var accepts = ['application/vnd.kafka.v2+json'];
      var returnType = OffsetWithAvroSchema;

      return this.apiClient.callApi(
        '/topics/{topic_name}/partitions/{partition_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
