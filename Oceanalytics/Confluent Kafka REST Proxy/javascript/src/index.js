/**
 * Kafka REST proxy
 * Confluent Kafka REST proxy
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ConsumerRequest', 'model/ConsumerResponse', 'model/Offset', 'model/OffsetForPartition', 'model/OffsetForPartitionWithMetadata', 'model/OffsetWithAvroSchema', 'model/Partition', 'model/PartitionInTopic', 'model/Record', 'model/RecordInfo', 'model/Replica', 'model/Topic', 'model/TopicSubscriptionRequest', 'model/Topics', 'api/BrokerApi', 'api/ConsumerApi', 'api/PartitionApi', 'api/TopicApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/ConsumerRequest'), require('./model/ConsumerResponse'), require('./model/Offset'), require('./model/OffsetForPartition'), require('./model/OffsetForPartitionWithMetadata'), require('./model/OffsetWithAvroSchema'), require('./model/Partition'), require('./model/PartitionInTopic'), require('./model/Record'), require('./model/RecordInfo'), require('./model/Replica'), require('./model/Topic'), require('./model/TopicSubscriptionRequest'), require('./model/Topics'), require('./api/BrokerApi'), require('./api/ConsumerApi'), require('./api/PartitionApi'), require('./api/TopicApi'));
  }
}(function(ApiClient, ConsumerRequest, ConsumerResponse, Offset, OffsetForPartition, OffsetForPartitionWithMetadata, OffsetWithAvroSchema, Partition, PartitionInTopic, Record, RecordInfo, Replica, Topic, TopicSubscriptionRequest, Topics, BrokerApi, ConsumerApi, PartitionApi, TopicApi) {
  'use strict';

  /**
   * Confluent_Kafka_REST_proxy.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var KafkaRestProxy = require('index'); // See note below*.
   * var xxxSvc = new KafkaRestProxy.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new KafkaRestProxy.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new KafkaRestProxy.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new KafkaRestProxy.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.0.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The ConsumerRequest model constructor.
     * @property {module:model/ConsumerRequest}
     */
    ConsumerRequest: ConsumerRequest,
    /**
     * The ConsumerResponse model constructor.
     * @property {module:model/ConsumerResponse}
     */
    ConsumerResponse: ConsumerResponse,
    /**
     * The Offset model constructor.
     * @property {module:model/Offset}
     */
    Offset: Offset,
    /**
     * The OffsetForPartition model constructor.
     * @property {module:model/OffsetForPartition}
     */
    OffsetForPartition: OffsetForPartition,
    /**
     * The OffsetForPartitionWithMetadata model constructor.
     * @property {module:model/OffsetForPartitionWithMetadata}
     */
    OffsetForPartitionWithMetadata: OffsetForPartitionWithMetadata,
    /**
     * The OffsetWithAvroSchema model constructor.
     * @property {module:model/OffsetWithAvroSchema}
     */
    OffsetWithAvroSchema: OffsetWithAvroSchema,
    /**
     * The Partition model constructor.
     * @property {module:model/Partition}
     */
    Partition: Partition,
    /**
     * The PartitionInTopic model constructor.
     * @property {module:model/PartitionInTopic}
     */
    PartitionInTopic: PartitionInTopic,
    /**
     * The Record model constructor.
     * @property {module:model/Record}
     */
    Record: Record,
    /**
     * The RecordInfo model constructor.
     * @property {module:model/RecordInfo}
     */
    RecordInfo: RecordInfo,
    /**
     * The Replica model constructor.
     * @property {module:model/Replica}
     */
    Replica: Replica,
    /**
     * The Topic model constructor.
     * @property {module:model/Topic}
     */
    Topic: Topic,
    /**
     * The TopicSubscriptionRequest model constructor.
     * @property {module:model/TopicSubscriptionRequest}
     */
    TopicSubscriptionRequest: TopicSubscriptionRequest,
    /**
     * The Topics model constructor.
     * @property {module:model/Topics}
     */
    Topics: Topics,
    /**
     * The BrokerApi service constructor.
     * @property {module:api/BrokerApi}
     */
    BrokerApi: BrokerApi,
    /**
     * The ConsumerApi service constructor.
     * @property {module:api/ConsumerApi}
     */
    ConsumerApi: ConsumerApi,
    /**
     * The PartitionApi service constructor.
     * @property {module:api/PartitionApi}
     */
    PartitionApi: PartitionApi,
    /**
     * The TopicApi service constructor.
     * @property {module:api/TopicApi}
     */
    TopicApi: TopicApi
  };

  return exports;
}));
